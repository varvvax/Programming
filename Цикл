Цикл - повторение блока кода до выполнения условия.

for - цикл-счётчик. Структура:

for (инициализация; условие; изменение) {
  // тело цикла
}

c++
Инициализация: Присвоение начального значения переменной цикла (например, int i = 0;).
Условие: Продолжение цикла, пока оно истинно (например, i < 100;).
Изменение: Изменение переменной на каждой итерации (например, i++;).
Пример: Заполнение массива

byte myArray[100];
for (int i = 0; i < 100; i++) {
  myArray[i] = 25; // Значение i от 0 до 99
}

c++
Особенности for:

Настройки необязательны (; обязательны).
Множественные счетчики/условия/инкременты через , (запятая).
Бесконечный цикл: for (;;) (выход через break).

Цикл while (англ. "пока"), он же "цикл с предусловием", выполняется до тех пор, пока верно указанное условие. Если условие изначально неверно, цикл будет пропущен, не сделает ни одной итерации. Объявляется очень просто: ключевое слово while, далее условие в скобках, и вот уже тело цикла:

int i = 0;
while (i < 10) {
  i++;
}
Хммм, вам не кажется знакомым действие этого примера? Всё верно, это полный аналог цикла for с настройками (int i = 0; i < 10; i++) . Единственное отличие в том, что на последней итерации i примет значение 10, так как на значении 9 цикл разрешит выполнение. Ещё интересный вариант, который можно встретить на просторах чужого кода. Работает на основе того факта, что любое число кроме нуля обрабатывается логикой как true:

byte a = 5;
while (a--) {
  // выполнится 5 раз
}
Цикл while тоже удобно использовать как вечный цикл, например, ожидая наступление какого-либо события (нажатие кнопки):

// выполняется, пока не нажата кнопка
while (кнопка не нажата);
Пока условие не произойдёт, код не пойдёт дальше, застрянет на этом цикле. Как вы уже поняли, оператор if тут не нужен, нужно указывать именно логическое значение, можно даже вот так:

while (true);
Всё, вертимся здесь бесконечно! Помимо цикла с предусловием есть ещё цикл с постусловием, так называемый do while
