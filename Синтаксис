Синтаксис
 • Тело функций — в { }, код внутри называется блоком кода.
 • Команды заканчиваются ;.
 • Методы вызываются через . (пример: Serial.begin();).
 • Вызов функции всегда с () (даже без параметров, пример: loop()).
 • Десятичный разделитель — . (пример: 0.25).
 • Запятая , используется для:
 • Аргументов функций (digitalWrite(3, HIGH);)
 • Элементов массива (int myArray[] = {3, 4, 5, 6};)
 • Нескольких команд в строке
 • Символ — в ' ', строка — в " ".
 • Имена переменных:
 • Латинские буквы, цифры, _ (пример: myVal_35).
 • Нельзя начинать с цифры.
 • Регистр важен (val ≠ Val).
 • Комментарии:
 • Однострочный: // текст
 • Многострочный: /* текст */
Оформление кода
 • Форматирование — пробелы, интервалы, отступы. В Arduino IDE автоформатирование: Ctrl+T.
 • Пробелы:
 • Между знаками +, -, =, == и т. д.
 • После ,, :, ;, но не перед ними.
 • Отступы (табуляция) — сдвиг блока вправо (Tab).
 • Новое действие — с новой строки.

Стиль именования
 • Переменные и функции — с маленькой буквы (value).
 • camelCase → getValue
 • under_score → get_value
 • Типы данных, классы — с большой буквы (Servo).
 • Константы — верхний регистр, _ (MOTOR_SPEED).
 • Приватные переменные — _имя (_position).

Сокращения
 • btn (button), idx/i (index), buf (buffer), val (value), var (variable), ptr (pointer).

Частые названия функций
 • getValue() — получить
 • setTime() — установить
 • print(), show() — вывести
 • read(), write() — читать/записывать
 • begin(), start() — начать
 • end(), stop() — завершить

Длина имени не влияет на размер прошивки.
> варешка:
Структура кода в Arduino
 1. Переменные объявляются до использования.
 2. Библиотеки/файлы подключаются до использования их классов и типов.
 3. Функции можно вызывать до или после объявления.

Основные функции
 • setup() — выполняется один раз при запуске.
 • loop() — выполняется постоянно в цикле.
 • Внутри main.cpp они встроены в:

int main() {
    setup();
    for (;;) {
        loop();
    }
    return 0;
}



Структура скетча
 1. Описание, ссылки, заметки
 2. Константы-настройки (#define, const)
 3. Служебные константы (изменять только при необходимости)
 4. Подключение библиотек, объявление классов и типов
 5. Глобальные переменные
 6. setup()
 7. loop()
 8. Дополнительные функции

Важно: Для крупных проектов нужна другая организация кода.

> варешка:
Подключение библиотек и файлов

Для подключения библиотек используется #include:

#include <Servo.h>  // подключает библиотеку Servo.h
#include "Servo.h"  // тоже подключает, но ищет сначала в папке со скетчем

 • <> — ищет только в папке библиотек.
 • "" — сначала ищет в папке со скетчем, затем в библиотеках.

Где хранятся библиотеки?
 1. Пользовательская папка — Документы/Arduino/libraries (библиотеки, добавленные вручную).
 2. Папка программы — C:/Program Files (x86)/Arduino/libraries (встроенные библиотеки).

Горячие клавиши в Arduino IDE

Перемещение:
 • Ctrl + ←/→ — влево/вправо на слово
 • Home / End — в начало/конец строки

Выделение:
 • Shift + ←/→ — символ слева/справа
 • Shift + Ctrl + ←/→ — слово слева/справа
 • Shift + Home/End — до начала/конца строки

Редактирование:
 • Ctrl + Z/Y — отмена/повтор
 • Ctrl + C/X/V — копировать/вырезать/вставить

Arduino IDE:
 • Ctrl + U — загрузить прошивку
 • Ctrl + R — скомпилировать
 • Ctrl + Shift + M — открыть монитор порта
 • Ctrl + T — автоформатирование

Совет: Используйте TAB, а не пробелы, для ровного выравнивания кода.
