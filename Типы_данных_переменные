Область видимости
Переменные, константы const и другие создаваемые пользователем данные имеют такое важное понятие, как область видимости. Она бывает глобальной и локальной.

Глобальная
Глобальная переменная:

Объявляется вне функций, например просто в начале программы.
Доступна для чтения и записи в любом месте программы.
Находится в оперативной памяти на всём протяжении работы программы, то есть не теряет своё значение.
При объявлении имеет нулевое значение.
byte var;   // глобальная переменная
void setup() {
  var = 50;
}
void loop() {
  var = 70;
}
Локальная
Локальная переменная:

Объявляется внутри любого блока кода, заключённого в { фигурные скобки }.
Доступна для чтения и записи только внутри своего блока кода (и во всех вложенных в него).
Находится в оперативной памяти с момента объявления и до закрывающей фигурной скобки, то есть удаляется из памяти и её значение стирается.
При объявлении имеет случайное значение.
Важный момент: если имя локальной переменной совпадает с одной из глобальных, то приоритет обращения отдаётся локальной переменной (в её области определения).

byte var; // глобальная переменная
void setup() {
 byte var;  // локальная переменная
 var = 50;  // меняем локальную var
}
void loop() {
 var = 70;  // меняем глобальную var
}
Статические переменные
Вспомним, как работает обычная локальная переменная: при входе в свой блок кода локальная переменная создаётся заново, а при выходе - удаляется из памяти и теряет своё значение. Если локальная переменная объявлена как static - она будет сохранять своё значение на всём протяжении работы программы, но область видимости останется локальной: взаимодействовать с переменной можно будет только внутри блока кода, где она создана (и во всех вложенных в него).

void setup() {
}
void loop() {
  byte varL = 0;
  varL++;
  static byte varS = 0;
  varS++;
  // здесь varL всегда будет равна 1
  // а varS - постоянно увеличиваться
}
Статические переменные позволяют более красиво организовывать свой код, избавляясь от лишних глобальных переменных.

Преобразование типов
Иногда требуется преобразовать один тип данных в другой: например, функция принимает int, а вы хотите передать ей byte. В большинстве случаев компилятор сам разберётся и преобразует byte в int, но иногда вылетает ошибка в стиле "попытка передать byte туда, где ждут int". В таком случае можно преобразовать тип данных, для этого достаточно указать нужный тип данных в скобках перед преобразуемой переменной (тип_данных)переменная, иногда можно встретить запись тип_данных(переменная). Результат вернёт переменную с новым типом данных, сам же тип данной у переменной не изменится. Например:

// переменная типа byte
byte val = 10;
// передаём какой-то функции, которая ожидает int
sendVal( (int)val );
И всё! val будет обрабатываться как int, а не как byte.
